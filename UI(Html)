<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CarbonTrade - Carbon Offset Marketplace</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Taurus, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .logo {
            font-size: 2.5em;
            font-weight: bold;
            color: #2d5016;
            text-align: center;
            margin-bottom: 10px;
        }

        .tagline {
            text-align: center;
            color: #666;
            font-size: 1.1em;
        }

        .nav {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }

        .nav-btn {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        }

        .nav-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
        }

        .nav-btn.active {
            background: linear-gradient(135deg, #2d5016, #4CAF50);
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 2fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .sidebar, .content-area {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .section {
            display: none;
        }

        .section.active {
            display: block;
        }

        .section-title {
            font-size: 1.8em;
            color: #2d5016;
            margin-bottom: 20px;
            text-align: center;
        }

        .credit-card, .project-card {
            background: linear-gradient(135deg, #fff, #f8f9fa);
            border: 2px solid #e9ecef;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .credit-card:hover, .project-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            border-color: #4CAF50;
        }

        .credit-price {
            font-size: 1.3em;
            font-weight: bold;
            color: #2d5016;
        }

        .project-type {
            display: inline-block;
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.85em;
            font-weight: 500;
            margin-bottom: 10px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #2d5016;
        }

        .form-group input, .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #4CAF50;
        }

        .btn {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
            width: 100%;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
        }

        .btn-danger {
            background: linear-gradient(135deg, #f44336, #d32f2f);
            box-shadow: 0 4px 15px rgba(244, 67, 54, 0.3);
        }

        .btn-danger:hover {
            box-shadow: 0 6px 20px rgba(244, 67, 54, 0.4);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 25px;
        }

        .stat-card {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        }

        .stat-value {
            font-size: 2em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9em;
            opacity: 0.9;
        }

        .transaction-log {
            max-height: 400px;
            overflow-y: auto;
            background: #f8f9fa;
            border-radius: 10px;
            padding: 15px;
        }

        .transaction-item {
            background: white;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 8px;
            border-left: 4px solid #4CAF50;
        }

        .portfolio-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background: linear-gradient(135deg, #fff, #f8f9fa);
            border-radius: 10px;
            margin-bottom: 10px;
            border: 2px solid #e9ecef;
        }

        .alert {
            background: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            border: 1px solid #c3e6cb;
        }

        .alert.success {
            background: #d4edda;
            color: #155724;
            border-color: #c3e6cb;
        }

        .alert.error {
            background: #f8d7da;
            color: #721c24;
            border-color: #f5c6cb;
        }

        .market-summary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            text-align: center;
        }

        .verification-badge {
            background: #28a745;
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: 500;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .nav {
                flex-wrap: wrap;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">üåç CarbonTrade</div>
            <div class="tagline">Professional Carbon Offset Marketplace Simulation</div>
            <div class="nav">
                <button class="nav-btn active" onclick="showSection('marketplace')">Marketplace</button>
                <button class="nav-btn" onclick="showSection('portfolio')">My Portfolio</button>
                <button class="nav-btn" onclick="showSection('trade')">Trade</button>
                <button class="nav-btn" onclick="showSection('projects')">Projects</button>
                <button class="nav-btn" onclick="showSection('analytics')">Analytics</button>
            </div>
        </div>

        <div class="main-content">
            <!-- Left Sidebar -->
            <div class="sidebar">
                <div class="market-summary">
                    <h3>Market Summary</h3>
                    <div style="margin-top: 15px;">
                        <div>Current Price: <strong>$45.30/tCO‚ÇÇ</strong></div>
                        <div>24h Change: <strong style="color: #90EE90;">+2.3%</strong></div>
                        <div>Volume Today: <strong>12,450 tCO‚ÇÇ</strong></div>
                    </div>
                </div>
                
                <h3 style="color: #2d5016; margin-bottom: 15px;">Quick Actions</h3>
                <button class="btn" onclick="quickBuy()" style="margin-bottom: 10px;">Quick Buy (10 Credits)</button>
                <button class="btn btn-danger" onclick="retireCredits()" style="margin-bottom: 10px;">Retire Credits</button>
                
                <div style="margin-top: 20px;">
                    <h4 style="color: #2d5016;">Current User</h4>
                    <select id="currentUser" onchange="switchUser()">
                        <option value="GreenCorp Inc.">GreenCorp Inc.</option>
                        <option value="EcoStart Ltd.">EcoStart Ltd.</option>
                        <option value="Sustainable Dynamics">Sustainable Dynamics</option>
                        <option value="Carbon Neutral Co.">Carbon Neutral Co.</option>
                    </select>
                </div>
            </div>

            <!-- Main Content Area -->
            <div class="content-area">
                <!-- Marketplace Section -->
                <div id="marketplace" class="section active">
                    <h2 class="section-title">Carbon Credits Marketplace</h2>
                    <div id="marketplace-content">
                        <!-- Credits will be populated by JavaScript -->
                    </div>
                </div>

                <!-- Portfolio Section -->
                <div id="portfolio" class="section">
                    <h2 class="section-title">My Portfolio</h2>
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-value" id="totalCredits">0</div>
                            <div class="stat-label">Total Credits</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="retiredCredits">0</div>
                            <div class="stat-label">Credits Retired</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="portfolioValue">$0</div>
                            <div class="stat-label">Portfolio Value</div>
                        </div>
                    </div>
                    <div id="portfolio-holdings">
                        <!-- Portfolio items will be populated by JavaScript -->
                    </div>
                </div>

                <!-- Trade Section -->
                <div id="trade" class="section">
                    <h2 class="section-title">Trade Carbon Credits</h2>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                        <div>
                            <h3 style="color: #2d5016; margin-bottom: 15px;">Buy Credits</h3>
                            <div class="form-group">
                                <label>Select Project</label>
                                <select id="buyProject"></select>
                            </div>
                            <div class="form-group">
                                <label>Quantity (tCO‚ÇÇ)</label>
                                <input type="number" id="buyQuantity" min="1" value="10">
                            </div>
                            <div class="form-group">
                                <label>Price per Credit</label>
                                <input type="number" id="buyPrice" step="0.01" value="45.30">
                            </div>
                            <button class="btn" onclick="buyCredits()">Buy Credits</button>
                        </div>
                        <div>
                            <h3 style="color: #2d5016; margin-bottom: 15px;">Sell Credits</h3>
                            <div class="form-group">
                                <label>Select Holdings</label>
                                <select id="sellProject"></select>
                            </div>
                            <div class="form-group">
                                <label>Quantity (tCO‚ÇÇ)</label>
                                <input type="number" id="sellQuantity" min="1" value="5">
                            </div>
                            <div class="form-group">
                                <label>Price per Credit</label>
                                <input type="number" id="sellPrice" step="0.01" value="47.50">
                            </div>
                            <button class="btn" onclick="sellCredits()">Sell Credits</button>
                        </div>
                    </div>
                </div>

                <!-- Projects Section -->
                <div id="projects" class="section">
                    <h2 class="section-title">Carbon Offset Projects</h2>
                    <div id="projects-content">
                        <!-- Projects will be populated by JavaScript -->
                    </div>
                </div>

                <!-- Analytics Section -->
                <div id="analytics" class="section">
                    <h2 class="section-title">Trading Analytics</h2>
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-value" id="totalTrades">0</div>
                            <div class="stat-label">Total Trades</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="totalVolume">0</div>
                            <div class="stat-label">Total Volume (tCO‚ÇÇ)</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="avgPrice">$0</div>
                            <div class="stat-label">Avg Price</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="totalRetired">0</div>
                            <div class="stat-label">Total Retired (tCO‚ÇÇ)</div>
                        </div>
                    </div>
                    <h3 style="color: #2d5016; margin: 20px 0;">Transaction History</h3>
                    <div class="transaction-log" id="transaction-log">
                        <!-- Transaction history will be populated by JavaScript -->
                    </div>
                </div>
            </div>

            <!-- Right Sidebar -->
            <div class="sidebar">
                <h3 style="color: #2d5016; margin-bottom: 15px;">Recent Activity</h3>
                <div id="recent-activity">
                    <!-- Recent activity will be populated by JavaScript -->
                </div>
                
                <div style="margin-top: 30px;">
                    <h3 style="color: #2d5016; margin-bottom: 15px;">Market News</h3>
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 10px;">
                        <div style="font-size: 0.9em; color: #666; margin-bottom: 10px;">
                            <strong>üå± New Forest Project</strong><br>
                            Amazon Reforestation Initiative launches 50K credits
                        </div>
                        <div style="font-size: 0.9em; color: #666; margin-bottom: 10px;">
                            <strong>üìä Market Update</strong><br>
                            Carbon prices up 15% this month due to increased demand
                        </div>
                        <div style="font-size: 0.9em; color: #666;">
                            <strong>üè≠ Industrial Partnership</strong><br>
                            Major corporations commit to net-zero targets
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="alerts"></div>

    <script>
        // Comprehensive Carbon Marketplace Simulation System
        
        // Data Models
        let users = {
            'GreenCorp Inc.': {
                balance: 100000,
                portfolio: {
                    'Amazon Reforestation': 25,
                    'Wind Power Texas': 15,
                    'Methane Capture': 10
                },
                retired: 30
            },
            'EcoStart Ltd.': {
                balance: 50000,
                portfolio: {
                    'Solar Farm India': 20,
                    'Ocean Cleanup': 8
                },
                retired: 12
            },
            'Sustainable Dynamics': {
                balance: 75000,
                portfolio: {
                    'Forest Conservation': 18,
                    'Biogas Project': 22
                },
                retired: 18
            },
            'Carbon Neutral Co.': {
                balance: 120000,
                portfolio: {
                    'Geothermal Energy': 30,
                    'Soil Carbon': 15
                },
                retired: 25
            }
        };

        let projects = {
            'Amazon Reforestation': {
                type: 'Forestry',
                location: 'Brazil',
                credits: 10000,
                price: 42.50,
                verification: 'VCS',
                description: 'Large-scale reforestation project in the Amazon rainforest protecting biodiversity'
            },
            'Wind Power Texas': {
                type: 'Renewable Energy',
                location: 'USA',
                credits: 15000,
                price: 38.75,
                verification: 'Gold Standard',
                description: 'Wind farm generating clean electricity and displacing fossil fuels'
            },
            'Methane Capture': {
                type: 'Waste Management',
                location: 'Germany',
                credits: 8000,
                price: 52.30,
                verification: 'VCS',
                description: 'Landfill methane capture preventing potent greenhouse gas emissions'
            },
            'Solar Farm India': {
                type: 'Renewable Energy',
                location: 'India',
                credits: 12000,
                price: 35.60,
                verification: 'CDM',
                description: 'Utility-scale solar installation providing clean energy access'
            },
            'Ocean Cleanup': {
                type: 'Nature-based',
                location: 'Pacific Ocean',
                credits: 5000,
                price: 65.80,
                verification: 'Blue Carbon',
                description: 'Marine ecosystem restoration and plastic removal project'
            },
            'Forest Conservation': {
                type: 'REDD+',
                location: 'Indonesia',
                credits: 20000,
                price: 28.90,
                verification: 'VCS',
                description: 'Avoided deforestation protecting tropical forest ecosystems'
            },
            'Biogas Project': {
                type: 'Renewable Energy',
                location: 'Kenya',
                credits: 6000,
                price: 41.20,
                verification: 'Gold Standard',
                description: 'Community biogas systems from organic waste'
            },
            'Geothermal Energy': {
                type: 'Renewable Energy',
                location: 'Iceland',
                credits: 18000,
                price: 44.70,
                verification: 'VCS',
                description: 'Geothermal power plant utilizing natural earth heat'
            },
            'Soil Carbon': {
                type: 'Agriculture',
                location: 'Australia',
                credits: 9000,
                price: 39.40,
                verification: 'ACCUs',
                description: 'Regenerative farming practices sequestering carbon in soil'
            }
        };

        let transactions = [];
        let currentUser = 'GreenCorp Inc.';

        // Core System Functions
        function showSection(sectionName) {
            document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));
            document.querySelectorAll('.nav-btn').forEach(b => b.classList.remove('active'));
            
            document.getElementById(sectionName).classList.add('active');
            event.target.classList.add('active');
            
            updateSectionContent(sectionName);
        }

        function updateSectionContent(section) {
            switch(section) {
                case 'marketplace':
                    renderMarketplace();
                    break;
                case 'portfolio':
                    renderPortfolio();
                    break;
                case 'trade':
                    renderTradeForm();
                    break;
                case 'projects':
                    renderProjects();
                    break;
                case 'analytics':
                    renderAnalytics();
                    break;
            }
        }

        function renderMarketplace() {
            const container = document.getElementById('marketplace-content');
            container.innerHTML = '';
            
            Object.entries(projects).forEach(([name, project]) => {
                const creditCard = document.createElement('div');
                creditCard.className = 'credit-card';
                creditCard.innerHTML = `
                    <div class="project-type">${project.type}</div>
                    <h3>${name}</h3>
                    <p><strong>Location:</strong> ${project.location}</p>
                    <p><strong>Available:</strong> ${project.credits.toLocaleString()} tCO‚ÇÇ</p>
                    <div class="credit-price">$${project.price}/tCO‚ÇÇ</div>
                    <p style="margin-top: 10px; color: #666;">${project.description}</p>
                    <div style="margin-top: 10px;">
                        <span class="verification-badge">‚úì ${project.verification} Verified</span>
                    </div>
                    <button class="btn" style="margin-top: 15px;" onclick="quickBuyProject('${name}')">
                        Quick Buy 10 Credits
                    </button>
                `;
                container.appendChild(creditCard);
            });
        }

        function renderPortfolio() {
            const user = users[currentUser];
            const holdings = document.getElementById('portfolio-holdings');
            
            document.getElementById('totalCredits').textContent = 
                Object.values(user.portfolio).reduce((sum, credits) => sum + credits, 0);
            document.getElementById('retiredCredits').textContent = user.retired;
            
            let totalValue = 0;
            Object.entries(user.portfolio).forEach(([project, credits]) => {
                totalValue += credits * projects[project].price;
            });
            document.getElementById('portfolioValue').textContent = `$${totalValue.toLocaleString()}`;
            
            holdings.innerHTML = '';
            Object.entries(user.portfolio).forEach(([project, credits]) => {
                const item = document.createElement('div');
                item.className = 'portfolio-item';
                item.innerHTML = `
                    <div>
                        <strong>${project}</strong><br>
                        <small>${credits} tCO‚ÇÇ @ $${projects[project].price}</small>
                    </div>
                    <div>
                        <strong>$${(credits * projects[project].price).toLocaleString()}</strong>
                    </div>
                `;
                holdings.appendChild(item);
            });
        }

        function renderTradeForm() {
            const buySelect = document.getElementById('buyProject');
            const sellSelect = document.getElementById('sellProject');
            
            buySelect.innerHTML = '';
            Object.keys(projects).forEach(project => {
                const option = document.createElement('option');
                option.value = project;
                option.textContent = `${project} - $${projects[project].price}`;
                buySelect.appendChild(option);
            });
            
            sellSelect.innerHTML = '';
            Object.keys(users[currentUser].portfolio).forEach(project => {
                const option = document.createElement('option');
                option.value = project;
                option.textContent = `${project} (${users[currentUser].portfolio[project]} available)`;
                sellSelect.appendChild(option);
            });
        }

        function renderProjects() {
            const container = document.getElementById('projects-content');
            container.innerHTML = '';
            
            Object.entries(projects).forEach(([name, project]) => {
                const projectCard = document.createElement('div');
                projectCard.className = 'project-card';
                projectCard.innerHTML = `
                    <div class="project-type">${project.type}</div>
                    <h3>${name}</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 15px;">
                        <div>
                            <p><strong>Location:</strong> ${project.location}</p>
                            <p><strong>Available Credits:</strong> ${project.credits.toLocaleString()} tCO‚ÇÇ</p>
                            <p><strong>Current Price:</strong> $${project.price}</p>
                        </div>
                        <div>
                            <p><strong>Verification Standard:</strong> ${project.verification}</p>
                            <div style="margin-top: 10px;">
                                <span class="verification-badge">‚úì Verified Project</span>
                            </div>
                        </div>
                    </div>
                    <p style="margin-top: 15px; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                        ${project.description}
                    </p>
                `;
                container.appendChild(projectCard);
            });
        }

        function renderAnalytics() {
            const totalTrades = transactions.length;
            const totalVolume = transactions.reduce((sum, t) => sum + t.quantity, 0);
            const avgPrice = totalVolume > 0 ? transactions.reduce((sum, t) => sum + (t.price * t.quantity), 0) / totalVolume : 0;
            const totalRetired = Object.values(users).reduce((sum, user) => sum + user.retired, 0);
            
            document.getElementById('totalTrades').textContent = totalTrades;
            document.getElementById('totalVolume').textContent = totalVolume.toLocaleString();
            document.getElementById('avgPrice').textContent = `$${avgPrice.toFixed(2)}`;
            document.getElementById('totalRetired').textContent = totalRetired.toLocaleString();
            
            const log = document.getElementById('transaction-log');
            log.innerHTML = '';
            
            transactions.slice(-20).reverse().forEach(transaction => {
                const item = document.createElement('div');
                item.className = 'transaction-item';
                item.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <strong>${transaction.type}</strong> - ${transaction.project}<br>
                            <small>${transaction.user} | ${transaction.timestamp}</small>
                        </div>
                        <div style="text-align: right;">
                            <strong>${transaction.quantity} tCO‚ÇÇ</strong><br>
                            <small>@ $${transaction.price}</small>
                        </div>
                    </div>
                `;
                log.appendChild(item);
            });
        }

        // Trading Functions
        function buyCredits() {
            const project = document.getElementById('buyProject').value;
            const quantity = parseInt(document.getElementById('buyQuantity').value);
            const price = parseFloat(document.getElementById('buyPrice').value);
            
            if (quantity <= 0 || price <= 0) {
                showAlert('Please enter valid quantity and price', 'error');
                return;
            }
            
            const user = users[currentUser];
            
            if (!user.portfolio[project] || user.portfolio[project] < quantity) {
                showAlert('Insufficient credits in portfolio', 'error');
                return;
            }
            
            const revenue = quantity * price;
            
            // Execute trade
            user.balance += revenue;
            user.portfolio[project] -= quantity;
            if (user.portfolio[project] === 0) {
                delete user.portfolio[project];
            }
            projects[project].credits += quantity;
            
            // Log transaction
            transactions.push({
                type: 'SELL',
                user: currentUser,
                project: project,
                quantity: quantity,
                price: price,
                timestamp: new Date().toLocaleString()
            });
            
            showAlert(`Successfully sold ${quantity} credits from ${project} for ${revenue.toLocaleString()}`, 'success');
            updateRecentActivity();
            updateCurrentSection();
        }

        function quickBuy() {
            const project = 'Amazon Reforestation';
            const quantity = 10;
            const price = projects[project].price;
            const cost = quantity * price;
            const user = users[currentUser];
            
            if (cost > user.balance) {
                showAlert('Insufficient balance for quick purchase', 'error');
                return;
            }
            
            user.balance -= cost;
            user.portfolio[project] = (user.portfolio[project] || 0) + quantity;
            projects[project].credits -= quantity;
            
            transactions.push({
                type: 'QUICK BUY',
                user: currentUser,
                project: project,
                quantity: quantity,
                price: price,
                timestamp: new Date().toLocaleString()
            });
            
            showAlert(`Quick purchase: ${quantity} credits from ${project}`, 'success');
            updateRecentActivity();
            updateCurrentSection();
        }

        function quickBuyProject(projectName) {
            const quantity = 10;
            const price = projects[projectName].price;
            const cost = quantity * price;
            const user = users[currentUser];
            
            if (cost > user.balance) {
                showAlert('Insufficient balance for this purchase', 'error');
                return;
            }
            
            if (quantity > projects[projectName].credits) {
                showAlert('Not enough credits available', 'error');
                return;
            }
            
            user.balance -= cost;
            user.portfolio[projectName] = (user.portfolio[projectName] || 0) + quantity;
            projects[projectName].credits -= quantity;
            
            transactions.push({
                type: 'QUICK BUY',
                user: currentUser,
                project: projectName,
                quantity: quantity,
                price: price,
                timestamp: new Date().toLocaleString()
            });
            
            showAlert(`Purchased ${quantity} credits from ${projectName}`, 'success');
            updateRecentActivity();
            updateCurrentSection();
        }

        function retireCredits() {
            const user = users[currentUser];
            const totalCredits = Object.values(user.portfolio).reduce((sum, credits) => sum + credits, 0);
            
            if (totalCredits === 0) {
                showAlert('No credits available to retire', 'error');
                return;
            }
            
            // Retire 5 credits from the largest holding
            let maxProject = '';
            let maxCredits = 0;
            
            Object.entries(user.portfolio).forEach(([project, credits]) => {
                if (credits > maxCredits) {
                    maxCredits = credits;
                    maxProject = project;
                }
            });
            
            const retireQuantity = Math.min(5, maxCredits);
            
            user.portfolio[maxProject] -= retireQuantity;
            if (user.portfolio[maxProject] === 0) {
                delete user.portfolio[maxProject];
            }
            user.retired += retireQuantity;
            
            transactions.push({
                type: 'RETIRE',
                user: currentUser,
                project: maxProject,
                quantity: retireQuantity,
                price: 0,
                timestamp: new Date().toLocaleString()
            });
            
            showAlert(`Retired ${retireQuantity} credits from ${maxProject}. Total CO‚ÇÇ offset: ${retireQuantity} tons`, 'success');
            updateRecentActivity();
            updateCurrentSection();
        }

        function switchUser() {
            currentUser = document.getElementById('currentUser').value;
            updateCurrentSection();
            updateRecentActivity();
            showAlert(`Switched to ${currentUser}`, 'success');
        }

        // Utility Functions
        function showAlert(message, type = 'success') {
            const alertsContainer = document.getElementById('alerts');
            const alert = document.createElement('div');
            alert.className = `alert ${type}`;
            alert.innerHTML = `
                <strong>${type === 'success' ? '‚úÖ' : '‚ùå'}</strong> ${message}
                <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; cursor: pointer;">‚úï</button>
            `;
            alert.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 1000;
                min-width: 300px;
                animation: slideIn 0.3s ease;
            `;
            
            alertsContainer.appendChild(alert);
            
            setTimeout(() => {
                if (alert.parentElement) {
                    alert.remove();
                }
            }, 5000);
        }

        function updateRecentActivity() {
            const container = document.getElementById('recent-activity');
            container.innerHTML = '';
            
            const recentTransactions = transactions
                .filter(t => t.user === currentUser)
                .slice(-5)
                .reverse();
            
            if (recentTransactions.length === 0) {
                container.innerHTML = '<p style="color: #666; font-style: italic;">No recent activity</p>';
                return;
            }
            
            recentTransactions.forEach(transaction => {
                const activity = document.createElement('div');
                activity.style.cssText = `
                    background: #f8f9fa;
                    padding: 10px;
                    border-radius: 8px;
                    margin-bottom: 8px;
                    font-size: 0.9em;
                `;
                
                const typeColor = {
                    'BUY': '#4CAF50',
                    'SELL': '#2196F3',
                    'RETIRE': '#FF9800',
                    'QUICK BUY': '#4CAF50'
                };
                
                activity.innerHTML = `
                    <div style="color: ${typeColor[transaction.type]}; font-weight: bold;">
                        ${transaction.type}
                    </div>
                    <div>${transaction.project}</div>
                    <div style="color: #666;">
                        ${transaction.quantity} tCO‚ÇÇ
                        ${transaction.price > 0 ? `@ ${transaction.price}` : ''}
                    </div>
                `;
                container.appendChild(activity);
            });
        }

        function updateCurrentSection() {
            const activeSection = document.querySelector('.section.active').id;
            updateSectionContent(activeSection);
        }

        // Initialize the application
        function initializeApp() {
            renderMarketplace();
            updateRecentActivity();
            
            // Add some initial transactions for demo purposes
            transactions.push(
                {
                    type: 'BUY',
                    user: 'GreenCorp Inc.',
                    project: 'Amazon Reforestation',
                    quantity: 25,
                    price: 42.50,
                    timestamp: new Date(Date.now() - 86400000).toLocaleString()
                },
                {
                    type: 'BUY',
                    user: 'EcoStart Ltd.',
                    project: 'Solar Farm India',
                    quantity: 20,
                    price: 35.60,
                    timestamp: new Date(Date.now() - 43200000).toLocaleString()
                },
                {
                    type: 'RETIRE',
                    user: 'GreenCorp Inc.',
                    project: 'Wind Power Texas',
                    quantity: 5,
                    price: 0,
                    timestamp: new Date(Date.now() - 21600000).toLocaleString()
                }
            );
        }

        // Add CSS animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
        `;
        document.head.appendChild(style);

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', initializeApp);
    </script>
</body>
</html>error');
                return;
            }
            
            const cost = quantity * price;
            const user = users[currentUser];
            
            if (cost > user.balance) {
                showAlert('Insufficient balance for this purchase', 'error');
                return;
            }
            
            if (quantity > projects[project].credits) {
                showAlert('Not enough credits available in this project', 'error');
                return;
            }
            
            // Execute trade
            user.balance -= cost;
            user.portfolio[project] = (user.portfolio[project] || 0) + quantity;
            projects[project].credits -= quantity;
            
            // Log transaction
            transactions.push({
                type: 'BUY',
                user: currentUser,
                project: project,
                quantity: quantity,
                price: price,
                timestamp: new Date().toLocaleString()
            });
            
            showAlert(`Successfully purchased ${quantity} credits from ${project} for $${cost.toLocaleString()}`, 'success');
            updateRecentActivity();
            updateCurrentSection();
        }

        function sellCredits() {
            const project = document.getElementById('sellProject').value;
            const quantity = parseInt(document.getElementById('sellQuantity').value);
            const price = parseFloat(document.getElementById('sellPrice').value);
            
            if (quantity <= 0 || price <= 0) {
                showAlert('Please enter valid quantity and price', '
